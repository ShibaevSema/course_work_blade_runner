{"ast":null,"code":"import { DialogService, DynamicDialogRef } from 'primeng/dynamicdialog';\nimport { MainTablePopupComponent } from '../popups/main-table-popup/main-table-popup.component';\nimport { HumanoidFormComponent } from '../forms/humanoid-form/humanoid-form.component';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"primeng/api\";\nimport * as i2 from \"primeng/dynamicdialog\";\nimport * as i3 from \"../services/humanoid.service\";\n\nconst _c0 = function () {\n  return {\n    \"right\": \"0\"\n  };\n};\n\nfunction MainTableComponent_ng_template_1_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r4 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"span\", 5)(1, \"button\", 6);\n    i0.ɵɵlistener(\"click\", function MainTableComponent_ng_template_1_Template_button_click_1_listener() {\n      i0.ɵɵrestoreView(_r4);\n      const ctx_r3 = i0.ɵɵnextContext();\n      return ctx_r3.createNewPerson();\n    });\n    i0.ɵɵelementEnd()();\n  }\n\n  if (rf & 2) {\n    i0.ɵɵstyleMap(i0.ɵɵpureFunction0(2, _c0));\n  }\n}\n\nfunction MainTableComponent_ng_template_3_th_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"th\");\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const col_r6 = ctx.$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", col_r6.header, \" \");\n  }\n}\n\nfunction MainTableComponent_ng_template_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"tr\");\n    i0.ɵɵtemplate(1, MainTableComponent_ng_template_3_th_1_Template, 2, 1, \"th\", 7);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r1.cols);\n  }\n}\n\nfunction MainTableComponent_ng_template_4_td_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"td\");\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const col_r9 = ctx.$implicit;\n    const humanoid_r7 = i0.ɵɵnextContext().$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", humanoid_r7[col_r9.field], \" \");\n  }\n}\n\nfunction MainTableComponent_ng_template_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"tr\", 8);\n    i0.ɵɵtemplate(1, MainTableComponent_ng_template_4_td_1_Template, 2, 1, \"td\", 7);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const humanoid_r7 = ctx.$implicit;\n    const ctx_r2 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"pSelectableRow\", humanoid_r7);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r2.cols);\n  }\n}\n\nexport let MainTableComponent = /*#__PURE__*/(() => {\n  class MainTableComponent {\n    constructor(messageService, ref, dialogService, humanoidService) {\n      this.messageService = messageService;\n      this.ref = ref;\n      this.dialogService = dialogService;\n      this.humanoidService = humanoidService;\n    }\n\n    ngOnInit() {\n      this.cols = [{\n        field: 'fullName',\n        header: 'Полное имя'\n      }, {\n        field: 'sex',\n        header: 'Пол'\n      }, {\n        field: 'birthDate',\n        header: 'Дата рождения'\n      }, {\n        field: 'deathDate',\n        header: 'Дата смерти'\n      }, {\n        field: 'location',\n        header: 'Местоположение'\n      }];\n      this.allHumanoids = this.humanoidService.getAllHumanoids();\n      this.onSelectCutChange();\n    }\n\n    onRowSelect(event) {\n      this.ref = this.dialogService.open(MainTablePopupComponent, {\n        data: {\n          humanoid: this.selectedHumanoid\n        },\n        header: \"[id:\" + this.selectedHumanoid.id + \"] \" + this.selectedHumanoid.fullName,\n        width: '80%',\n        dismissableMask: true,\n        contentStyle: {\n          \"max-height\": \"800px\",\n          \"overflow\": \"auto\"\n        },\n        baseZIndex: 10000,\n        showHeader: true\n      });\n    }\n\n    ngOnDestroy() {\n      if (this.ref) {\n        this.ref.close();\n      }\n    }\n\n    onSuccess(message) {\n      this.messageService.add({\n        severity: 'success',\n        summary: 'Success',\n        detail: message,\n        life: 2000\n      });\n    }\n\n    onError(message) {\n      this.messageService.add({\n        severity: 'error',\n        summary: 'Error!',\n        detail: message,\n        life: 2000\n      });\n    }\n\n    onSelectCutChange() {\n      switch (this.headerValue) {\n        case 'Все':\n          this.selectedCut = this.allHumanoids;\n          break;\n\n        case 'Люди':\n          this.selectedCut = this.allHumanoids.filter(humanoid => {\n            return humanoid.isHuman;\n          });\n          break;\n\n        case 'Реплеканты':\n          this.selectedCut = this.allHumanoids.filter(humanoid => {\n            return !humanoid.isHuman && humanoid.isHuman != null;\n          });\n          break;\n\n        case 'Не установлено':\n          this.selectedCut = this.allHumanoids.filter(humanoid => {\n            return humanoid.isHuman == null;\n          });\n          break;\n\n        default:\n          this.selectedCut = this.allHumanoids;\n          break;\n      }\n    }\n\n    createNewPerson() {\n      this.ref = this.dialogService.open(HumanoidFormComponent, {\n        header: \"Добавить нового гуманойда\",\n        width: '80%',\n        dismissableMask: true,\n        contentStyle: {\n          \"min-height\": \"1000px\",\n          \"overflow\": \"auto\"\n        },\n        baseZIndex: 10000,\n        showHeader: true\n      });\n    }\n\n  }\n\n  MainTableComponent.ɵfac = function MainTableComponent_Factory(t) {\n    return new (t || MainTableComponent)(i0.ɵɵdirectiveInject(i1.MessageService), i0.ɵɵdirectiveInject(i2.DynamicDialogRef), i0.ɵɵdirectiveInject(i2.DialogService), i0.ɵɵdirectiveInject(i3.HumanoidService));\n  };\n\n  MainTableComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: MainTableComponent,\n    selectors: [[\"app-main-table\"]],\n    inputs: {\n      headerValue: \"headerValue\"\n    },\n    features: [i0.ɵɵProvidersFeature([DynamicDialogRef, DialogService])],\n    decls: 5,\n    vars: 3,\n    consts: [[3, \"header\"], [\"pTemplate\", \"icons\"], [\"selectionMode\", \"single\", \"responsiveLayout\", \"scroll\", 3, \"value\", \"selection\", \"selectionChange\", \"onRowSelect\"], [\"pTemplate\", \"header\"], [\"pTemplate\", \"body\"], [1, \"p-input-icon-right\"], [\"pButton\", \"\", \"type\", \"button\", \"label\", \"\\u0414\\u043E\\u0431\\u0430\\u0432\\u0438\\u0442\\u044C \\u043D\\u043E\\u0432\\u043E\\u0433\\u043E \\u0447\\u0435\\u043B\\u043E\\u0432\\u0435\\u043A\\u0430\", \"icon\", \"pi pi-user-plus\", 3, \"click\"], [4, \"ngFor\", \"ngForOf\"], [3, \"pSelectableRow\"]],\n    template: function MainTableComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"p-panel\", 0);\n        i0.ɵɵtemplate(1, MainTableComponent_ng_template_1_Template, 2, 3, \"ng-template\", 1);\n        i0.ɵɵelementStart(2, \"p-table\", 2);\n        i0.ɵɵlistener(\"selectionChange\", function MainTableComponent_Template_p_table_selectionChange_2_listener($event) {\n          return ctx.selectedHumanoid = $event;\n        })(\"onRowSelect\", function MainTableComponent_Template_p_table_onRowSelect_2_listener($event) {\n          return ctx.onRowSelect($event);\n        });\n        i0.ɵɵtemplate(3, MainTableComponent_ng_template_3_Template, 2, 1, \"ng-template\", 3);\n        i0.ɵɵtemplate(4, MainTableComponent_ng_template_4_Template, 2, 2, \"ng-template\", 4);\n        i0.ɵɵelementEnd()();\n      }\n\n      if (rf & 2) {\n        i0.ɵɵproperty(\"header\", ctx.headerValue);\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"value\", ctx.selectedCut)(\"selection\", ctx.selectedHumanoid);\n      }\n    },\n    styles: [\".p-panel[_ngcontent-%COMP%]   .p-panel-header[_ngcontent-%COMP%]   button[_ngcontent-%COMP%]{right:0}\"]\n  });\n  return MainTableComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}